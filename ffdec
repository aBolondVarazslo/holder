import os
import sys
import json
import sqlite3
import ctypes
from ctypes import c_void_p, c_char_p, c_int, byref

def load_nss(nss_path):
    os.environ['PATH'] += os.pathsep + nss_path
    try:
        nss = ctypes.CDLL("nss3.dll")
    except OSError:
        print("[!] Failed to load nss3.dll")
        sys.exit(1)
    return nss

def initialize_nss(nss, profile_path):
    if not nss.NSS_Init(profile_path.encode()):
        return True
    else:
        print("[!] NSS_Init failed")
        return False

def decrypt_string(nss, encrypted_b64):
    SECItem = ctypes.Structure
    class SECItem(ctypes.Structure):
        _fields_ = [("type", c_int), ("data", c_void_p), ("len", c_int)]

    # Convert base64 to bytes
    import base64
    decoded_data = base64.b64decode(encrypted_b64)

    input_item = SECItem()
    input_item.data = ctypes.cast(ctypes.create_string_buffer(decoded_data), c_void_p)
    input_item.len = len(decoded_data)

    output_item = SECItem()

    # Call PK11SDR_Decrypt
    if nss.PK11SDR_Decrypt(byref(input_item), byref(output_item), None) == -1:
        return "[decryption failed]"

    # Read decrypted password from memory
    decrypted = ctypes.string_at(output_item.data, output_item.len).decode()
    return decrypted

def decrypt_firefox_passwords(profile_path):
    nss_path = os.path.dirname(sys.executable)  # fallback to system Firefox install if needed
    firefox_path = os.path.join(os.environ['ProgramFiles'], 'Mozilla Firefox')
    if os.path.exists(firefox_path):
        nss_path = firefox_path

    nss = load_nss(nss_path)
    if not initialize_nss(nss, profile_path):
        return

    logins_path = os.path.join(profile_path, "logins.json")
    if not os.path.exists(logins_path):
        print(f"[!] logins.json not found in {profile_path}")
        return

    with open(logins_path, "r", encoding="utf-8") as f:
        logins = json.load(f)

    results = []

    for login in logins.get("logins", []):
        hostname = login.get("hostname")
        username = decrypt_string(nss, login.get("encryptedUsername"))
        password = decrypt_string(nss, login.get("encryptedPassword"))
        results.append(f"Site: {hostname}\nUsername: {username}\nPassword: {password}\n")

    nss.NSS_Shutdown()
    return results

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python custom_firefox_decrypt.py <firefox_profile_path>")
        sys.exit(1)

    profile = sys.argv[1]
    creds = decrypt_firefox_passwords(profile)
    if creds:
        for entry in creds:
            print(entry)
